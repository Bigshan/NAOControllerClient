<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3">
    <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s project. Highest level possible." x="0" y="0">
        <bitmap>media/images/box/root.png</bitmap>
        <script language="4">
            <content>
                <![CDATA[]]>
</content>
        </script>
        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
        <Timeline enable="0">
            <BehaviorLayer name="behavior_layer1">
                <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                        <Box name="NAO Controller for IOS" id="2" localization="8" tooltip="Enter tooltip here" x="377" y="110">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="-1">
                                <BehaviorLayer name="Communication">
                                    <BehaviorKeyframe name="OnlineInfo" index="1">
                                        <Diagram>
                                            <Box name="Stop" id="2" localization="8" tooltip="Stop the parent timeline at the current frame index.&#x0A;&#x0A;!!Warning!! This box does not stop the behavior! It is only the timeline which will&#x0A;stop playing, the keyframes and boxes will still be running." x="351" y="40">
                                                <bitmap>media/images/box/box-timeLine.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onInput_onStop(self):
        self.stopTimelineParent()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStop" type="1" type_size="1" nature="1" inner="0" tooltip="Parent timeline stops when a signal is received on this input." id="2" />
                                            </Box>
                                            <Box name="OnlineInfo" id="3" localization="8" tooltip="Enter tooltip here" x="381" y="158">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import socket
import struct
import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.motion = ALProxy("ALMotion")
        self.memory = ALProxy("ALMemory")
        try:
            self.audio = ALProxy("ALAudioDevice")
        except :
            self.audio = ALProxy("ALAudioPlayer")
    def onLoad(self):
        self.bstart = True
        self.config = False
    def onUnload(self):
        self.bstart = False
        self.sock.close()
    def onInput_onStart(self):
        self.SendPort = self.getParameter("SendPort")
        self.RecvPort = self.getParameter("RecvPort")
        self.threadtime = self.getParameter("threadtime")
        self.memory.insertData("Selected",0)
        self.startSocket()
        while(self.bstart):
            try:
                self.msg,(self.addr, self.port) = self.sock.recvfrom( 20 )
                self.logger.info("get recv")
                self.msg_unpack()
            except :
                self.logger.info("bug????")
            pass
    def onInput_onStop(self):
        self.onUnload()
    def startSocket(self):
        self.desc = ('<broadcast>',self.SendPort)
        self.sock = socket.socket( socket.AF_INET, socket.SOCK_DGRAM )
        self.sock.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,1)
        self.sock.setsockopt(socket.SOL_SOCKET,socket.SO_BROADCAST,1)
        self.sock.bind( ('',self.RecvPort))
    def msg_unpack(self):
        if self.msg == "OnlineReq":
            self.sendOnlineMsg()
        else:
            pass

    def sendOnlineMsg(self):
        header = "OnlineRes"
        name = " "
        version = " "
        try:
            volume = self.audio.getOutputVolume()
            isRobotics = 1
        except:
            isRobotics = 0
        if(isRobotics == 1):
            self.logger.info("=======1")
            try:
                stiffness = self.motion.getStiffnesses("Body")
            except :
                stiffness = 0
            try:
                system = ALProxy("ALSystem")
                name = system.robotName()
                version = system.systemVersion()
            except :
                pass

        else:
            self.logger.info("=======0")
            stiffness = 0
        isSelected = self.memory.getData("Selected")
        robotInfo = struct.pack('!15s20s10s3h',header,name,version,isRobotics,stiffness,isSelected)
        self.sock.sendto(robotInfo,(self.addr, self.port))]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Parameter name="SendPort" inherits_from_parent="1" content_type="1" value="47391" default_value="47316" min="47300" max="47399" tooltip="" id="4" />
                                                <Parameter name="threadtime" inherits_from_parent="1" content_type="2" value="0.5" default_value="1" min="0" max="5" tooltip="" id="5" />
                                                <Parameter name="RecvPort" inherits_from_parent="0" content_type="1" value="47391" default_value="47399" min="47390" max="47399" tooltip="" id="6" />
                                            </Box>
                                            <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="1" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                                <BehaviorLayer name="Say">
                                    <BehaviorKeyframe name="ReqAndRes" index="1">
                                        <Diagram>
                                            <Box name="ReqAndRes" id="3" localization="8" tooltip="Enter tooltip here" x="83" y="49">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import socket
import struct
import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.motion = ALProxy("ALMotion")
        self.memory = ALProxy("ALMemory")
        self.managerProxy = ALProxy("ALBehaviorManager")
        self.tts = ALProxy("ALTextToSpeech")
        try:
            self.audio = ALProxy("ALAudioDevice")
        except :
            self.audio = ALProxy("ALAudioPlayer")
    def onLoad(self):
        self.bstart = True
        self.config = False
    def onUnload(self):
        self.bstart = False
        self.sock.close()
    def onInput_onStart(self):
        self.SendPort = self.getParameter("SendPort")
        self.RecvPort = self.getParameter("RecvPort")
        self.threadtime = self.getParameter("threadtime")
        self.startSocket()
        while(self.bstart):
            try:
                self.msg,(self.addr, self.port) = self.sock.recvfrom( 20 )
                self.logger.info("get recv")
                self.msg_unpack()
            except :
                self.logger.info("bug????")
            pass
    def onInput_onStop(self):
        self.onUnload()
    def startSocket(self):
        self.desc = ('<broadcast>',self.SendPort)
        self.sock = socket.socket( socket.AF_INET, socket.SOCK_DGRAM )
        self.sock.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,1)
        self.sock.setsockopt(socket.SOL_SOCKET,socket.SO_BROADCAST,1)
        self.sock.bind( ('',self.RecvPort))
    def msg_unpack(self):
        if self.msg == "BehaviorReq":
            if self.config:
                self.sendBehaviorMsg()
        elif self.msg == "SettingsReq":
            if self.config:
                self.sendSettingsMsg()
        elif self.msg == "ConfigON":
            self.config = True
            self.memory.insertData("Selected",1)
            self.output(1)
        elif self.msg == "ConfigOFF":
            self.config = False
            self.memory.insertData("Selected",0)
            self.output(0)
        else:
            pass
    def sendBehaviorMsg(self):
        header = "BehaviorRes"
        behaviorList = self.managerProxy.getInstalledBehaviors()
        runingList = self.managerProxy.getRunningBehaviors()
        runingBehaviors = ""
        installBehaviors = ""
        for i in runingList:
            i = i.rstrip("/.")
            runingBehaviors += i
            runingBehaviors += "$"
        for i in behaviorList:
            if i.count(".currentChoregrapheBehavior"):
                pass
            elif i.count(".lastUploadedChoregrapheBehavior"):
                pass
            elif i.count("animation"):
                pass
            elif i.count("default"):
                pass
            elif i.count("boot-config"):
                pass
            elif i.count("diagnostic"):
                pass
            else:
                installBehaviors += i
                installBehaviors += "$"
        robotInfo = struct.pack('!15s400s1000s',header,runingBehaviors,installBehaviors)
        self.sock.sendto(robotInfo,(self.addr, self.port))
        robotInfo1 = struct.pack('!15s400s1000s',header,"test_1$test_2$sayhello$","test_1$test_3$test_2$sayhello$test_6$")
        #self.sock.sendto(robotInfo1,('127.0.0.1', self.port))
    def sendSettingsMsg(self):
        header = "SettingsRes"
        supportLanguage = ""
        isHighVersion = 0
        robotName = ""
        try:
            volume = self.audio.getOutputVolume()
            isRobotics = 1
        except:
            volume = 0
            isRobotics = 0
        if(isRobotics == 1):
            try:
                volume = self.audio.getOutputVolume()
                stiffness = self.motion.getStiffnesses("Body")
            except :
                volume = 0
                stiffness = 0
            try:
                system = ALProxy("ALSystem")
                isHighVersion = 1
                robotName = system.robotName()
            except :
                pass
        else:
            volume = 0
            stiffness = 0
        currentLanguage = self.tts.getLanguage()
        languageList = self.tts.getAvailableLanguages()
        for i in languageList:
            supportLanguage += i
            supportLanguage += "$"
        robotInfo = struct.pack('!15s20s200s20s4h',header,currentLanguage,supportLanguage,robotName,isRobotics,isHighVersion,stiffness,volume)
        self.sock.sendto(robotInfo,(self.addr, self.port))]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="output" type="2" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                <Parameter name="SendPort" inherits_from_parent="1" content_type="1" value="47396" default_value="47316" min="47300" max="47399" tooltip="" id="5" />
                                                <Parameter name="threadtime" inherits_from_parent="1" content_type="2" value="0.5" default_value="1" min="0" max="5" tooltip="" id="6" />
                                                <Parameter name="RecvPort" inherits_from_parent="0" content_type="1" value="47399" default_value="47399" min="47390" max="47399" tooltip="" id="7" />
                                            </Box>
                                            <Box name="GotoAction" id="2" localization="8" tooltip="Enter tooltip here" x="248" y="89">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
    def onLoad(self):
        pass
    def onUnload(self):
        pass
    def onInput_onStart(self, p):
        self.gotoState(20*p)
    def onInput_onStop(self):
        self.onUnload()
    def gotoState(self,p):
        try:
            self.getParentTimeline().goTo(p)
        except: # if NAOqi < 1.14
            self.gotoAndStopParent(p)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="2" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            </Box>
                                            <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="2" indexofinput="2" outputowner="3" indexofoutput="4" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                                <BehaviorLayer name="Behavior Cilent">
                                    <BehaviorKeyframe name="selection_off" index="1">
                                        <Diagram />
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="selection_on" index="20">
                                        <Diagram>
                                            <Box name="Action Cilent" id="3" localization="8" tooltip="Motion Cilent by shiqishan" x="133" y="102">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import socket
import struct
import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.memory = ALProxy("ALMemory")
        self.motion = ALProxy("ALMotion")
        self.postureProxy = ALProxy("ALRobotPosture")
        self.managerProxy = ALProxy("ALBehaviorManager")
        self.tts = ALProxy("ALTextToSpeech")
        self.startSocket()
    def onLoad(self):
        self.bstart = True
        self.stifness_tem = 3
    def onUnload(self):
        self.bstart = False
    def onInput_onStart(self):
        self.threadtime = self.getParameter("threadtime")
        while(self.bstart):
            self.msg,(self.addr, self.port) = self.sock.recvfrom( 500 )
            self.msg_unpack()
            time.sleep(self.threadtime)
    def onInput_onStop(self):
        self.onUnload()
        self.sock.close()
    def startSocket(self):
        self.sock = socket.socket( socket.AF_INET, socket.SOCK_DGRAM )
        self.sock.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,1)
        self.sock.bind( ('',47398))
    def msg_unpack(self):
        if(self.msg.startswith('WalkMsg',0,16)):
            header,walkX,walkY,theta,frequency = struct.unpack("!16s4i",self.msg)
            walkX = walkX/167772160.0
            walkY = walkY/167772160.0
            theta = theta/167772160.0
            frequency = frequency/167772160.0
            self.motion.setWalkTargetVelocity(walkX,walkY,theta,frequency)
        elif(self.msg.startswith('HeadMsg',0,16)):
            header,walkX,walkY,theta,frequency = struct.unpack("!16s4i",self.msg)
            walkX = walkX/167772160.0
            walkY = walkY/167772160.0
            currentYaw = self.motion.getAngles("HeadYaw",False)
            currentPitch = self.motion.getAngles("HeadPitch",False)
            if(walkX>0 and currentPitch[0]<=0.326):
                self.motion.changeAngles("HeadPitch",walkX,0.2)
            elif(walkX<=0 and currentPitch[0]>=-0.445):
                self.motion.changeAngles("HeadPitch",walkX,0.2)
            if(walkY>0 and currentYaw[0]<=2.07):
                self.motion.changeAngles("HeadYaw",walkY,0.2)
            if(walkY<=0 and currentYaw[0]>=-2.07):
                self.motion.changeAngles("HeadYaw",walkY,0.2)

        elif(self.msg.startswith('PostureMsg',0,16)):
            header,info = struct.unpack("!16s16s",self.msg)
            posture = self.getString(info)
            self.postureProxy.setMaxTryNumber(2)
            result = self.postureProxy.goToPosture(posture,0.6)
        elif(self.msg.startswith('SpeechMsg',0,16)):
            header,info1,info2 = struct.unpack("!16s20s412s",self.msg)
            targetIP = self.getString(info1)
            content = self.getString(info2)
            self.sock.sendto(struct.pack('!16s20s',"SpeechMsg",targetIP),(self.addr,47396))
            self.logger.info("ip=======%s",self.addr)
            self.outputText(content)
        elif(self.msg.startswith('SettingsMsg',0,16)):
            header,info1,info2,info3 = struct.unpack("!16s20s20s40s",self.msg)
            targetIP = self.getString(info1)
            body = self.getString(info2)
            value = self.getString(info3)
            if(body == "Stiffness"):
                self.logger.info("stiffness=======%f",float(value)/10.0)
                self.motion.post.stiffnessInterpolation("Body",float(value)/10.0, 0.1)
            elif(body == "Volume"):
                self.logger.info("vlume=======%d",int(value))
                try:
                    audio = ALProxy("ALAudioDevice")
                    audio.setOutputVolume(int(value))
                except:
                    pass
            elif(body == "Language"):
                self.logger.info("language=======%s",value)
                self.tts.setLanguage(value)
            elif(body == "RobotName"):
                self.logger.info("robotname=======%s",value)
                try:
                    system = ALProxy("ALSystem")
                    system.setRobotName(value)
                except:
                    pass
            elif(body == "System"):
                self.logger.info("system=======%s",value)
                try:
                    system = ALProxy("ALSystem")
                    if(value == "reboot"):
                        system.reboot()
                    elif(value == "shutdown"):
                        system.shutdown()
                except:
                  pass
        elif(self.msg.startswith('BehaviorMsg',0,16)):
            header,info1,info2,info3 = struct.unpack("!16s20s20s100s",self.msg)
            targetIP = self.getString(info1)
            body = self.getString(info2)
            behavior = self.getString(info3)
            if(body == "start"):
                self.logger.info("start=======%s",behavior)
                self.managerProxy.post.runBehavior(behavior)
                time.sleep(1.0)
                self.sock.sendto(struct.pack('!16s20s20s100s',"BehaviorMsg",targetIP,body,behavior),(self.addr,47396))
            elif(body == "stop"):
                self.logger.info("stop=======%s",behavior)
                if (self.managerProxy.isBehaviorRunning(behavior)):
                    self.managerProxy.stopBehavior(behavior)
                    time.sleep(1.0)
                    self.sock.sendto(struct.pack('!16s20s20s100s',"BehaviorMsg",targetIP,body,behavior),(self.addr,47396))
            elif(body == "stopall"):
                self.managerProxy.stopAllBehaviors()
                time.sleep(1.0)
                self.logger.info("stop======= all")
                self.sock.sendto(struct.pack('!16s20s20s100s',"BehaviorMsg",targetIP,body,behavior),(self.addr,47396))
        else:
            self.logger.info(self.msg)
    def getString(self,p):
        string = []
        string = p.split('*|')
        if len(string)>0:
            return string[0]
        else:
            return ""]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="outputText" type="3" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                                                <Parameter name="Conmunication_Port_2" inherits_from_parent="1" content_type="1" value="47398" default_value="47301" min="3000" max="80000" tooltip="" id="5" />
                                                <Parameter name="threadtime" inherits_from_parent="1" content_type="2" value="0.02" default_value="0.2" min="0" max="1" tooltip="" id="6" />
                                            </Box>
                                            <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="339" y="50">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            </Box>
                                            <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="2" indexofinput="2" outputowner="3" indexofoutput="4" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                    </Diagram>
                </BehaviorKeyframe>
            </BehaviorLayer>
        </Timeline>
    </Box>
</ChoregrapheProject>
