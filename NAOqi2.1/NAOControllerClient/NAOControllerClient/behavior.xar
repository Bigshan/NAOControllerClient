<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3">
    <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s project. Highest level possible." x="0" y="0">
        <bitmap>media/images/box/root.png</bitmap>
        <script language="4">
            <content>
                <![CDATA[]]>
</content>
        </script>
        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="指令盒行为结束时，送出信号。" id="4" />
        <Timeline enable="0">
            <BehaviorLayer name="behavior_layer1">
                <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                        <Box name="NAO Controller Client" id="1" localization="8" tooltip="version 2.0" x="423" y="143">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Parameter name="waitTime" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5" tooltip="" id="4" />
                            <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="-1">
                                <BehaviorLayer name="ReqAndRes">
                                    <BehaviorKeyframe name="ReqAndRes" index="1">
                                        <Diagram>
                                            <Box name="ReqAndRes" id="3" localization="8" tooltip="by shiqishan" x="288" y="150">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import socket
import struct
import time
import json
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.motion = ALProxy("ALMotion")
        self.managerProxy = ALProxy("ALBehaviorManager")
        self.tts = ALProxy("ALTextToSpeech")
        self.memory = ALProxy("ALMemory")
        self.RecvPort = 47391
        self.sendPort = 47394
        self.any = "0.0.0.0"
        self.isRobotics = 0
        self.isSelected = 0
        try:
            self.audio = ALProxy("ALAudioDevice")
            self.isRobotics = 1
        except Exception as e:
            self.audio = None
            self.isRobotics = 0

    def onLoad(self):
        self.bstart = True
    def onUnload(self):
        self.bstart = False
        self.sock.close()
    def onInput_onStart(self):
        self.stopTimelineParent()
        self.startSocket()
        while(self.bstart):
            try:
                self.msg,(self.addr, self.port) = self.sock.recvfrom( 400 )
                dic = {}
                try:
                    dic = json.loads(self.msg)
                except Exception as e:
                    self.logger.info("%s..online..json..error.%s",self.msg,e)
                try:
                    header = str(dic["header"])
                    if header == "NAOController-fsjahfjh":
                        recvPort = int(str(dic["recvPort"]))
                        self.sendPort = recvPort
                        self.msg_unpack(dic)
                except Exception as e:
                    self.logger.info("%s..msg..unpack..error.%s",self.msg,e)
            except Exception as e:
                self.logger.info("online..req..error..%s",e)
    def onInput_onStop(self):
        self.onUnload()
    def startSocket(self):
        anyAddr = "0.0.0.0"
        MCAST_ADDR = "227.168.123.111"
        self.sock = socket.socket( socket.AF_INET, socket.SOCK_DGRAM )
        self.sock.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,1)
        self.sock.bind((anyAddr,self.RecvPort))
        self.sock.setsockopt(socket.IPPROTO_IP,socket.IP_MULTICAST_TTL, 255)
        self.sock.setsockopt(socket.IPPROTO_IP,socket.IP_ADD_MEMBERSHIP,socket.inet_aton(MCAST_ADDR) + socket.inet_aton(anyAddr))
    def msg_unpack(self, dic):
        action = str(dic["path"])
        tag = str(dic["tag"])
        if action == "NC--robots-online":
            self.sendOnlineMsg(dic)
        elif action == "NC--behavior-all":
            if self.isSelected:
                self.sendBehaviorMsg(dic)
        elif action == "NCSettingsReq":
            if self.isSelected:
                self.sendSettingsMsg()
        elif action == "NC--robots-config-on":
            timediff = float(str(dic["timeDiff"]))
            self.memory.insertData("NAOController-TimeDiff",timediff)
            self.isSelected = 1
            self.gotoState(20)
            self.sendDic({"tag":tag})
        elif action == "NC--robots-config-off":
            self.isSelected = 0
            self.gotoState(0)
            self.sendDic({"tag":tag})
        else:
            pass
    def sendOnlineMsg(self, dic):
        recvTime = str(dic["sendTime"])
        timediff = time.time()-float(recvTime)
        tag = str(dic["tag"])
        recvPort = str(dic["recvPort"])
        self.sendPort = int(recvPort)
        name = "*Simulator*"
        version = " "
        behaviorVersion = 30
        batteryCharge = 0
        if(self.isRobotics == 1):
            try:
                system = ALProxy("ALSystem")
                name = system.robotName()
                version = system.systemVersion()
            except :
                pass
            try:
                battery = ALProxy("ALBattery")
                batteryCharge = battery.getBatteryCharge()
            except :
                pass
        #data = {"name":name,"version":version,"isRobot":self.isRobotics,"battery":batteryCharge,"isSelected":self.isSelected,"timediff":round(timediff,3),"tag":tag}
        data = {"name":name,"version":version,"isRobot":1,"battery":80,"isSelected":self.isSelected,"timediff":round(timediff,3),"tag":tag}
        self.sendDic(data)
    def sendBehaviorMsg(self, dic):
        tag = str(dic["tag"])
        defaultList = self.managerProxy.getDefaultBehaviors()
        behaviorList = self.managerProxy.getInstalledBehaviors()
        runingList = self.managerProxy.getRunningBehaviors()
        behaviors = ""
        for i in behaviorList:
            if i.count(".currentChoregrapheBehavior"):
                pass
            elif i.count(".lastUploadedChoregrapheBehavior"):
                pass
            elif i.count("animation"):
                pass
            elif i.count("default"):
                pass
            elif i.count("boot-config"):
                pass
            elif i.count("diagnostic"):
                pass
            else:
                isDefault = "N"
                isRuning = "N"
                if defaultList.count(i):
                    isDefault = "Y"
                if runingList.count(i):
                    isRuning = "Y"
                i += isDefault
                i += isRuning
                behaviors += i
                behaviors += "$"
                if len(behaviors) >7900:
                    break
        data = {"behaviors":behaviors,"tag":tag}
        self.sendDic(data)
    def sendSettingsMsg(self):
        supportLanguage = ""
        isHighVersion = 0
        robotName = ""
        if(self.isRobotics == 1):
            try:
                volume = self.audio.getOutputVolume()
                info = self.motion.getStiffnesses("Body")
                stiffness = info[0]
            except :
                volume = 0
                stiffness = 0
            try:
                system = ALProxy("ALSystem")
                isHighVersion = 1
                robotName = system.robotName()
            except :
                pass
        else:
            volume = 0
            stiffness = 0
        currentLanguage = self.tts.getLanguage()
        languageList = self.tts.getAvailableLanguages()
        for i in languageList:
            supportLanguage += i
            supportLanguage += "$"
            if len(supportLanguage) >360:
                    break
        robotInfo = struct.pack('!15s40s400s40s4h',header,currentLanguage,supportLanguage,robotName,self.isRobotics,isHighVersion,stiffness,volume)
        data = {"currentLanguage":currentLanguage,"supportLanguage":supportLanguage,"isRobot":self.isRobotics,"Name":robotName,"isHighVersion":isHighVersion,"stiffness":stiffness,"volume":volume}
        self.sock.sendto(data,(self.addr, self.port))

    def sendDic(self, p):
        data = {"header":"NAOController-sfhajkfhf"}
        data.update(p)
        self.sock.sendto(json.dumps(data,separators=(',',':')),(self.addr, self.sendPort))

    def gotoState(self, p):
        try:
            self.getParentTimeline().goTo(p)
        except: # if NAOqi < 1.14
            self.gotoAndStopParent(p)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                            </Box>
                                            <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="1" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                                <BehaviorLayer name="Behavior Cilent">
                                    <BehaviorKeyframe name="Selection_off" index="1">
                                        <Diagram />
                                    </BehaviorKeyframe>
                                    <BehaviorKeyframe name="Selection_on" index="20">
                                        <Diagram>
                                            <Box name="Behavior Cilent" id="3" localization="8" tooltip="Behavior Cilent by shiqishan" x="323" y="53">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import socket
import struct
import time
import json
import sys
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.memory = ALProxy("ALMemory")
        self.motion = ALProxy("ALMotion")
        self.postureProxy = ALProxy("ALRobotPosture")
        self.managerProxy = ALProxy("ALBehaviorManager")
        self.tts = ALProxy("ALTextToSpeech")
        self.MCAST_ADDR = "227.168.123.111"
        self.RecvPort = 47393
        self.sendPort = 47394
        self.threadtime = 0.02
        self.notiTag = 70000000
        self.startSocket()
        reload(sys)
        sys.setdefaultencoding('utf-8')
    def onLoad(self):
        self.bstart = True
        self.stifness_tem = 3
        self.timeIds = []
    def onUnload(self):
        self.bstart = False
    def onInput_onStart(self):
        self.tags = []
        while(self.bstart):
            try:
                self.msg,(self.addr, self.port) = self.sock.recvfrom( 400 )
                dic = {}
                try:
                    dic = json.loads(self.msg)
                except Exception as e:
                    self.logger.info("%s..online..json..error.%s",self.msg,e)
                try:
                    header = str(dic["header"])
                    if header == "NAOController-fsjahfjh":
                        recvPort = int(str(dic["recvPort"]))
                        self.sendPort = recvPort
                        self.msg_unpack(dic)
                except Exception as e:
                    self.logger.info("%s..msg..unpack..error.%s",self.msg,e)
            except Exception as e:
                self.logger.info("online..req..error..%s",e)
    def onInput_onStop(self):
        self.onUnload()
        self.sock.close()
    def startSocket(self):
        anyAddr = "0.0.0.0"
        self.sock = socket.socket( socket.AF_INET, socket.SOCK_DGRAM )
        self.sock.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,1)
        self.sock.bind((anyAddr,self.RecvPort))
        self.sock.setsockopt(socket.IPPROTO_IP,socket.IP_MULTICAST_TTL, 255)
        self.sock.setsockopt(socket.IPPROTO_IP,socket.IP_ADD_MEMBERSHIP,socket.inet_aton(self.MCAST_ADDR) + socket.inet_aton(anyAddr))
    def msg_unpack(self, dic):
        path = str(dic["path"])
        tag = str(dic["tag"])
        if self.tags.count(tag) >=1 :
            self.sendDic({"tag":tag})
            return
        if(path == "NC--notification-on"):
            pass
        elif(path == "NC--notification-off"):
            pass
        elif(path == "NC--motion-walk"):
            if int(tag) >= 10000000:
                self.sendDic({"tag":tag})
            walkX = int(dic["x"])/10.0
            walkY = int(dic["y"])/10.0
            theta = int(dic["thera"])/10.0
            frequency = int(dic["frequency"])/10.0
            self.motion.setWalkTargetVelocity(walkX,walkY,theta,frequency)

        elif(path == "NC--motion-head"):
            walkX = int(dic["x"])/10.0
            walkY = int(dic["y"])/10.0
            currentYaw = self.motion.getAngles("HeadYaw",False)
            currentPitch = self.motion.getAngles("HeadPitch",False)
            if(walkX>0 and currentPitch[0]<=0.326):
                self.motion.changeAngles("HeadPitch",walkX,0.2)
            elif(walkX<=0 and currentPitch[0]>=-0.445):
                self.motion.changeAngles("HeadPitch",walkX,0.2)
            if(walkY>0 and currentYaw[0]<=2.07):
                self.motion.changeAngles("HeadYaw",walkY,0.2)
            if(walkY<=0 and currentYaw[0]>=-2.07):
                self.motion.changeAngles("HeadYaw",walkY,0.2)
        elif(path == "NC--motion-posture"):
            posture = str(dic["posture"])
            self.sendDic({"tag":tag})
            self.tags.append(tag)
            self.postureProxy.setMaxTryNumber(2)
            result = self.postureProxy.goToPosture(posture,0.7)

        elif(path == "NC--behavior-single"):
            self.sendDic({"tag":tag})
            self.tags.append(tag)
            command = str(dic["command"])
            behavior = str(dic["behavior"])
            if(command == "start"):
                self.managerProxy.post.runBehavior(behavior)
            elif(command == "stop"):
                if (self.managerProxy.isBehaviorRunning(behavior)):
                    self.managerProxy.stopBehavior(behavior)
            elif(command == "add"):
                self.managerProxy.addDefaultBehavior(behavior)
            elif(command == "remove"):
                self.managerProxy.removeDefaultBehavior(behavior)

        elif(path == "SpeechMsg"):
            message = str(dic["message"])
            timeId = str(dic["timeId"])
            target = str(dic["target"])
            list = [self.addr,timeId]
            if not self.timeIds.count(timeId):
                self.outputText(message)
                self.timeIds.append(timeId)
            self.logger.info("target....%s",target)
            if not target == self.MCAST_ADDR:
                self.outputTimeId(list)
        elif(path == "SettingsMsg"):
            header,info1,info2,info3 = struct.unpack("!16s20s20s40s",self.msg)
            targetIP = self.getString(info1)
            body = self.getString(info2)
            value = self.getString(info3)
            if(body == "Stiffness"):
                self.motion.post.stiffnessInterpolation("Body",float(value)/10.0, 0.1)
            elif(body == "Volume"):
                try:
                    audio = ALProxy("ALAudioDevice")
                    audio.setOutputVolume(int(value))
                except:
                    pass
            elif(body == "Language"):
                self.tts.setLanguage(value)
            elif(body == "RobotName"):
                try:
                    system = ALProxy("ALSystem")
                    system.setRobotName(value)
                except:
                    pass
            elif(body == "System"):
                try:
                    system = ALProxy("ALSystem")
                    if(value == "reboot"):
                        system.reboot()
                    elif(value == "shutdown"):
                        system.shutdown()
                except:
                    pass
        elif(path == "SingleBehaviorMsg"):
            command = str(dic["command"])
            behavior = str(dic["behavior"])
            if(command == "start"):
                self.managerProxy.post.runBehavior(behavior)
            elif(command == "stop"):
                if (self.managerProxy.isBehaviorRunning(behavior)):
                    self.managerProxy.stopBehavior(behavior)
            elif(command == "add"):
                self.managerProxy.addDefaultBehavior(behavior)
            elif(command == "remove"):
                self.managerProxy.removeDefaultBehavior(behavior)
        elif(path == "MultiBehaviorMsg"):
            pass
        else:
            pass
    def getString(self,p):
        string = []
        string = p.split('*|')
        if len(string)>0:
            return string[0]
        else:
            return ""

    def sendDic(self, p):
        data = {"header":"NAOController-sfhajkfhf"}
        data.update(p)
        self.sock.sendto(json.dumps(data,separators=(',',':')),(self.addr, self.sendPort))

    def sendNotification(self, p):
        data = {"header":"NAOController-sfhajkfhf","tag":self.notiTag}
        data.update(p)
        self.sock.sendto(json.dumps(data,separators=(',',':')),(self.addr, self.sendPort))
        self.notiTag = self.notiTag+1

    def onInput_sendBehaviorNotification(self, p):
        key = "Notification--BehaviorsRun"
        runingBehaviors = ""
        for i in p:
            if i.count(".currentChoregrapheBehavior"):
                pass
            elif i.count(".lastUploadedChoregrapheBehavior"):
                pass
            elif i.count("animation"):
                pass
            elif i.count("default"):
                pass
            elif i.count("boot-config"):
                pass
            elif i.count("diagnostic"):
                pass
            else:
                runingBehaviors += i
                runingBehaviors += "$"
                if len(runingBehaviors) >7900:
                    break
        data = {"notikey":key,"runBehaviors":runingBehaviors}
        self.sendNotification(data)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="sendBehaviorNotification" type="0" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="4" />
                                                <Output name="outputText" type="3" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                                                <Output name="outputTimeId" type="0" type_size="1" nature="2" inner="0" tooltip="" id="6" />
                                            </Box>
                                            <Box name="NotificationCenter" id="1" localization="8" tooltip="NotificationCenter by shiqishan" x="499" y="223">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import socket
import struct
import time
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.memory = ALProxy("ALMemory")
        self.SendPort = 47392
        self.RecvPort = 47395
        self.isOn = True
        self.notificationIp = "227.168.123.122"
        self.startSocket()
    def onLoad(self):
        self.bstart = True
    def onUnload(self):
        self.bstart = False

    def onInput_onStart(self):
        while(self.bstart):
            try:
                self.msg,(self.addr, self.port) = self.sock.recvfrom( 400 )
                dic = {}
                try:
                    dic = json.loads(self.msg)
                except Exception as e:
                    self.logger.info("%s..notification..json..error.%s",self.msg,e)
                try:
                    header = str(dic["header"])
                    if header == "NAOController-fsjahfjh":
                        self.msg_unpack(dic)
                except Exception as e:
                    self.logger.info("%s..msg..unpack..error.%s",self.msg,e)
            except Exception as e:
                self.logger.info("notification..req..error..%s",e)


    def msg_unpack(self, dic):
        pass
    def onInput_BehaviorRuning(self, p):
        self.logger.info(p)
        header = "NCNotification"
        action = "BehaviorsRun"
        runingBehaviors = ""
        for i in p:
            if i.count(".currentChoregrapheBehavior"):
                pass
            elif i.count(".lastUploadedChoregrapheBehavior"):
                pass
            elif i.count("animation"):
                pass
            elif i.count("default"):
                pass
            elif i.count("boot-config"):
                pass
            elif i.count("diagnostic"):
                pass
            else:
                runingBehaviors += i
                runingBehaviors += "$"
                if len(runingBehaviors) >7900:
                    break
        self.logger.info(runingBehaviors)
        data = {"header":header,"action":action,"runBehaviors":runingBehaviors}
        self.sock.sendto(json.dumps(data,separators=(',',':')),(self.notificationIp, self.SendPort))

    def onInput_startSpeech(self, p):
        header = "NCNotification"
        action = "SpeechRecv"
        try:
            ip = p[0]
            timeId = p[1]
            data = {"header":header,"action":action,"timeId":timeId}
            self.sock.sendto(json.dumps(data,separators=(',',':')),(ip, self.SendPort))
        except Exception as e:
            self.logger.info("%s..notification...startSpeech..dic..error.%s",p,e)

    def onInput_onStop(self):
        self.onUnload()
        self.sock.close()
    def startSocket(self):
        self.sock = socket.socket( socket.AF_INET, socket.SOCK_DGRAM)
        self.sock.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,1)
        self.sock.bind(("",self.RecvPort))
    def getString(self,p):
        string = []
        string = p.split('*|')
        if len(string)>0:
            return string[0]
        else:
            return ""]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="" id="2" />
                                                <Input name="startSpeech" type="0" type_size="1" nature="1" inner="0" tooltip="" id="3" />
                                                <Input name="BehaviorRuning" type="0" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="5" />
                                            </Box>
                                            <Box name="Subscribe to Event" id="5" localization="8" tooltip="Subscribes to a signal on a NAOqi2 service, or an event in NAOqi&apos;s shared memory&#x0A;When subscribed, the output will be triggered every time the signal is emitted or the event is raised." x="164" y="163">
                                                <bitmap>media/images/box/sensors/STM.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        pass

    def onLoad(self):
        import threading
        self.lock = threading.RLock()
        self.signal = None
        self.linkId = -1

    def onUnload(self):
        with self.lock:
            self.unsubscribe()

    def onInput_onStart(self):
        with self.lock:
            self.unsubscribe()
            event = self.getParameter("event")

            if(len(event) == 0):
                self.onError("No event or signal given.")
                return

            params = event.split(".")
            if(len(params) == 2):
                try:
                    self.signal = getattr(self.session().service(params[0]), params[1])
                except Exception as e:
                    mem = self.session().service("ALMemory")
                    if(event in mem.getEventList()):
                        self.signal = mem.subscriber(event).signal
                    else:
                        self.onError(event + ": no such service.signal pair found, and no such event declared in ALMemory. Aborting.")
                        return
            else:
                self.signal = self.session().service("ALMemory").subscriber(event).signal

            self.linkId = self.signal.connect(self.reemitSignal)

    def onInput_onStop(self):
        with self.lock:
            self.unsubscribe()
            self.onStopped()

    def unsubscribe(self):
        if(self.signal is not None and self.linkId != -1):
            self.signal.disconnect(self.linkId)

        del self.signal
        self.signal = None
        self.linkId = -1

    def reemitSignal(self, *args):
        if(len(args) == 0):
            self.onEvent()
        elif(len(args) == 1):
            self.onEvent(args[0])
        else:
            self.onEvent(args)]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="When this input is activated, the box will try to subscribe to the signal or the event passed in the box parameter.&#x0A;&#x0A;If it is retriggered and the parameter has changed, the box will undo the previous subscription and subscribe to the new signal or the new event." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the box and cancel the subscription, if any." id="3" />
                                                <Output name="onEvent" type="0" type_size="1" nature="2" inner="0" tooltip="This output is triggered each time the signal/event to which the box is connected is emitted/raised. It will carry the payload associated with the signal emission/event raise." id="4" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
                                                <Output name="onError" type="3" type_size="1" nature="1" inner="0" tooltip="This output is triggered when the box encounters an error, and contains the error message." id="6" />
                                                <Parameter name="event" inherits_from_parent="0" content_type="3" value="BehaviorsRun" default_value="" custom_choice="0" tooltip='This parameter describes the signal to connect to, and the service advertising this signal.&#x0A;&#x0A;Use the pattern &quot;Service.Signal&quot; to connect to a signal, or the event key to connect to an event.' id="7" />
                                            </Box>
                                            <Box name="Say Text" id="6" localization="8" tooltip="Say the text received on its input." x="495" y="54">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                                <Resource name="Speech" type="Lock" timeout="0" />
                                            </Box>
                                            <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="6" indexofinput="2" outputowner="3" indexofoutput="5" />
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                                            <Link inputowner="3" indexofinput="3" outputowner="5" indexofoutput="4" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                    </Diagram>
                </BehaviorKeyframe>
            </BehaviorLayer>
        </Timeline>
    </Box>
</ChoregrapheProject>
